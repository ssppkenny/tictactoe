// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_math = require("rescript/lib/js/js_math.js");
var Tea_app = require("rescript-tea/src/tea_app.bs.js");
var Tea_cmd = require("rescript-tea/src/tea_cmd.bs.js");
var Tea_sub = require("rescript-tea/src/tea_sub.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Js_array = require("rescript/lib/js/js_array.js");
var Tea_html = require("rescript-tea/src/tea_html.bs.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function init(param) {
  return {
          state: {
            hd: {
              hd: [
                "left_upper",
                0
              ],
              tl: {
                hd: [
                  "center_upper",
                  0
                ],
                tl: {
                  hd: [
                    "right_upper",
                    0
                  ],
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: [
                  "left_middle",
                  0
                ],
                tl: {
                  hd: [
                    "center_middle",
                    0
                  ],
                  tl: {
                    hd: [
                      "right_middle",
                      0
                    ],
                    tl: /* [] */0
                  }
                }
              },
              tl: {
                hd: {
                  hd: [
                    "left_lower",
                    0
                  ],
                  tl: {
                    hd: [
                      "center_lower",
                      0
                    ],
                    tl: {
                      hd: [
                        "right_lower",
                        0
                      ],
                      tl: /* [] */0
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          },
          move: 1,
          winnerCoords: []
        };
}

var toCheck = [
  [
    0,
    1,
    2
  ],
  [
    3,
    4,
    5
  ],
  [
    6,
    7,
    8
  ],
  [
    0,
    3,
    6
  ],
  [
    1,
    4,
    7
  ],
  [
    2,
    5,
    8
  ],
  [
    2,
    4,
    6
  ],
  [
    0,
    4,
    8
  ]
];

var coords = [
  [
    [
      0,
      0
    ],
    [
      0,
      1
    ],
    [
      0,
      2
    ]
  ],
  [
    [
      1,
      0
    ],
    [
      1,
      1
    ],
    [
      1,
      2
    ]
  ],
  [
    [
      2,
      0
    ],
    [
      2,
      1
    ],
    [
      2,
      2
    ]
  ],
  [
    [
      0,
      0
    ],
    [
      1,
      0
    ],
    [
      2,
      0
    ]
  ],
  [
    [
      0,
      1
    ],
    [
      1,
      1
    ],
    [
      2,
      1
    ]
  ],
  [
    [
      0,
      2
    ],
    [
      1,
      2
    ],
    [
      2,
      2
    ]
  ],
  [
    [
      0,
      2
    ],
    [
      1,
      1
    ],
    [
      2,
      0
    ]
  ],
  [
    [
      0,
      0
    ],
    [
      1,
      1
    ],
    [
      2,
      2
    ]
  ]
];

function freePos(s) {
  var fp = [];
  Belt_List.forEachWithIndex(s, (function (i, x) {
          Belt_List.forEachWithIndex(x, (function (j, y) {
                  if (y[1] === 0) {
                    Js_array.push([
                          i,
                          j
                        ], fp);
                    return ;
                  }
                  
                }));
        }));
  return fp;
}

function areSame(r) {
  var a = r[0];
  var b = r[1];
  var c = r[2];
  if (a === b && b === c && a === c) {
    return a > 0;
  } else {
    return false;
  }
}

function check(m) {
  var s = m.state;
  var row = [];
  Belt_List.forEachWithIndex(s, (function (param, x) {
          Belt_List.forEachWithIndex(x, (function (param, y) {
                  Js_array.push(y[1], row);
                }));
        }));
  var a = Belt_Array.map(toCheck, (function (x) {
          var e1 = x[0];
          var e2 = x[1];
          var e3 = x[2];
          return areSame([
                      row[e1],
                      row[e2],
                      row[e3]
                    ]);
        }));
  var opt = Belt_Array.getIndexBy(a, (function (x) {
          return x;
        }));
  var ind = Belt_Option.getWithDefault(opt, -1);
  if (ind >= 0) {
    return Belt_Array.get(coords, ind);
  }
  
}

function nextCoords(fp) {
  var l = fp.length;
  if (l === 0) {
    return ;
  }
  var r = Js_math.random_int(0, l);
  return Belt_Array.get(fp, r);
}

function nextMove(m) {
  if (m.move === 1) {
    return 2;
  } else {
    return 1;
  }
}

function isTerminal(m) {
  var s = m.state;
  var b = Belt_List.reduce(s, true, (function (x, y) {
          var rv = Belt_List.reduce(y, true, (function (p, q) {
                  if (p) {
                    return q[1] !== 0;
                  } else {
                    return false;
                  }
                }));
          if (x) {
            return rv;
          } else {
            return false;
          }
        }));
  if (m.winnerCoords.length !== 0) {
    return true;
  } else {
    return b;
  }
}

function utility(m) {
  if (m.winnerCoords.length === 0) {
    return 0;
  }
  var match = m.winnerCoords[0];
  var row = Belt_Option.getWithDefault(Belt_List.get(m.state, match[0]), /* [] */0);
  var match$1 = Belt_Option.getWithDefault(Belt_List.get(row, match[1]), [
        "",
        0
      ]);
  if (match$1[1] === 1) {
    return 1;
  } else {
    return -1;
  }
}

function freePosToState(pos, s, value) {
  var q = pos[1];
  var p = pos[0];
  return Belt_List.mapWithIndex(s, (function (i, x) {
                return Belt_List.mapWithIndex(x, (function (j, y) {
                              var c = y[0];
                              if (i === p && q === j) {
                                return [
                                        c,
                                        value
                                      ];
                              } else {
                                return [
                                        c,
                                        y[1]
                                      ];
                              }
                            }));
              }));
}

function minValue(m) {
  if (isTerminal(m)) {
    return [
            utility(m),
            undefined
          ];
  }
  var fp = freePos(m.state);
  var models = Belt_Array.map(fp, (function (x) {
          var nm = nextMove(m);
          var s = freePosToState(x, m.state, nm);
          var newModel_winnerCoords = m.winnerCoords;
          var newModel = {
            state: s,
            move: nm,
            winnerCoords: newModel_winnerCoords
          };
          var opt = check(newModel);
          var sameCoords = Belt_Option.getWithDefault(opt, []);
          var model = {
            state: s,
            move: nm,
            winnerCoords: sameCoords
          };
          var match = maxValue(model);
          return [
                  match[0],
                  x
                ];
        }));
  var match = Belt_Array.reduce(models, [
        1000,
        undefined
      ], (function (a, b) {
          var v2 = b[0];
          var v1 = a[0];
          if (v1 < v2) {
            return [
                    v1,
                    a[1]
                  ];
          } else {
            return [
                    v2,
                    b[1]
                  ];
          }
        }));
  return [
          match[0],
          match[1]
        ];
}

function maxValue(m) {
  if (isTerminal(m)) {
    return [
            utility(m),
            undefined
          ];
  }
  var fp = freePos(m.state);
  var models = Belt_Array.map(fp, (function (x) {
          var nm = nextMove(m);
          var s = freePosToState(x, m.state, nm);
          var newModel_winnerCoords = m.winnerCoords;
          var newModel = {
            state: s,
            move: nm,
            winnerCoords: newModel_winnerCoords
          };
          var opt = check(newModel);
          var sameCoords = Belt_Option.getWithDefault(opt, []);
          var model = {
            state: s,
            move: nm,
            winnerCoords: sameCoords
          };
          var match = minValue(model);
          return [
                  match[0],
                  x
                ];
        }));
  var match = Belt_Array.reduce(models, [
        -1000,
        undefined
      ], (function (a, b) {
          var v2 = b[0];
          var v1 = a[0];
          if (v1 > v2) {
            return [
                    v1,
                    a[1]
                  ];
          } else {
            return [
                    v2,
                    b[1]
                  ];
          }
        }));
  return [
          match[0],
          match[1]
        ];
}

function minimaxSearch(m) {
  var match = maxValue(m);
  var move = match[1];
  console.log(move);
  return Belt_Option.getWithDefault(move, [
              -1,
              -1
            ]);
}

function update(model, msg) {
  var winnerCoords = model.winnerCoords;
  if (winnerCoords.length !== 0) {
    if (msg) {
      return [
              model,
              Tea_cmd.none
            ];
    } else {
      return [
              init(undefined),
              Tea_cmd.none
            ];
    }
  }
  if (!msg) {
    return [
            init(undefined),
            Tea_cmd.none
          ];
  }
  var j = msg._1;
  var i = msg._0;
  var s = Belt_List.mapWithIndex(model.state, (function (n, x) {
          return Belt_List.mapWithIndex(x, (function (m, y) {
                        var a = y[0];
                        var p = nextMove(model);
                        if (n === i && m === j) {
                          return [
                                  a,
                                  p
                                ];
                        } else {
                          return [
                                  a,
                                  y[1]
                                ];
                        }
                      }));
        }));
  var nm = nextMove(model);
  var newModel_winnerCoords = model.winnerCoords;
  var newModel = {
    state: s,
    move: nm,
    winnerCoords: newModel_winnerCoords
  };
  var opt = check(newModel);
  var sameCoords = Belt_Option.getWithDefault(opt, []);
  if (nm === 1) {
    return [
            {
              state: s,
              move: nm,
              winnerCoords: sameCoords
            },
            Tea_cmd.none
          ];
  }
  if (nm !== 2) {
    return [
            {
              state: s,
              move: nm,
              winnerCoords: sameCoords
            },
            Tea_cmd.none
          ];
  }
  var match = minimaxSearch(newModel);
  var y = match[1];
  var x = match[0];
  if (Caml_obj.equal([
          x,
          y
        ], [
          -1,
          -1
        ])) {
    return [
            {
              state: s,
              move: nm,
              winnerCoords: sameCoords
            },
            Tea_cmd.none
          ];
  } else {
    return [
            {
              state: s,
              move: nm,
              winnerCoords: sameCoords
            },
            Tea_cmd.msg(/* Coords */{
                  _0: x,
                  _1: y
                })
          ];
  }
}

function viewButton(title, msg) {
  return Tea_html.button(undefined, undefined, {
              hd: Tea_html.Events.onClick(msg),
              tl: {
                hd: Tea_html.Attributes.$$class("button"),
                tl: /* [] */0
              }
            }, {
              hd: Tea_html.text(title),
              tl: /* [] */0
            });
}

function subscriptions(param) {
  return Tea_sub.none;
}

function cellStyle(i, j, m, value) {
  var wc = m.winnerCoords;
  var style = value === 2 ? "cross" : "circle";
  if (Js_array.findIndex((function (x) {
            return Caml_obj.equal(x, [
                        i,
                        j
                      ]);
          }), wc) >= 0) {
    return {
            hd: Tea_html.Attributes.classList({
                  hd: [
                    style,
                    true
                  ],
                  tl: {
                    hd: [
                      "winner",
                      true
                    ],
                    tl: /* [] */0
                  }
                }),
            tl: /* [] */0
          };
  } else {
    return {
            hd: Tea_html.Attributes.$$class(style),
            tl: /* [] */0
          };
  }
}

function view(model) {
  return Tea_html.div(undefined, undefined, {
              hd: Tea_html.Attributes.$$class("wrapper"),
              tl: /* [] */0
            }, {
              hd: Tea_html.div(undefined, undefined, {
                    hd: Tea_html.Attributes.$$class("field"),
                    tl: /* [] */0
                  }, Belt_List.mapWithIndex(model.state, (function (i, x) {
                          return Tea_html.div(undefined, undefined, {
                                      hd: Tea_html.Attributes.$$class("row"),
                                      tl: /* [] */0
                                    }, Belt_List.mapWithIndex(x, (function (j, y) {
                                            var v = y[1];
                                            var t = v === 0 ? "" : (
                                                v === 1 ? "o" : "x"
                                              );
                                            return Tea_html.div(undefined, undefined, {
                                                        hd: Tea_html.Attributes.$$class(y[0]),
                                                        tl: {
                                                          hd: Tea_html.Events.onClick(/* Coords */{
                                                                _0: i,
                                                                _1: j
                                                              }),
                                                          tl: /* [] */0
                                                        }
                                                      }, {
                                                        hd: Tea_html.div(undefined, undefined, cellStyle(i, j, model, v), {
                                                              hd: Tea_html.text(t),
                                                              tl: /* [] */0
                                                            }),
                                                        tl: /* [] */0
                                                      });
                                          })));
                        }))),
              tl: {
                hd: viewButton("Restart", /* Restart */0),
                tl: /* [] */0
              }
            });
}

function partial_arg_init(param) {
  return [
          init(undefined),
          Tea_cmd.none
        ];
}

var partial_arg = {
  init: partial_arg_init,
  update: update,
  view: view,
  subscriptions: subscriptions
};

function main(param, param$1) {
  return Tea_app.standardProgram(partial_arg, param, param$1);
}

exports.init = init;
exports.toCheck = toCheck;
exports.coords = coords;
exports.freePos = freePos;
exports.areSame = areSame;
exports.check = check;
exports.nextCoords = nextCoords;
exports.nextMove = nextMove;
exports.isTerminal = isTerminal;
exports.utility = utility;
exports.freePosToState = freePosToState;
exports.minValue = minValue;
exports.maxValue = maxValue;
exports.minimaxSearch = minimaxSearch;
exports.update = update;
exports.viewButton = viewButton;
exports.subscriptions = subscriptions;
exports.cellStyle = cellStyle;
exports.view = view;
exports.main = main;
/* Tea_app Not a pure module */
